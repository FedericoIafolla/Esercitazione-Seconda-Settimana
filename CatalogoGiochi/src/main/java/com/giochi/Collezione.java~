package com.giochi;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class Collezione {
    private List<Gioco> giochi;

    public Collezione() {
        this.giochi = new ArrayList<>();
        aggiungiGioco(new GiocoDaTavolo("T001", "Monopoly", 1935, 29.99, 2, 180));
        aggiungiGioco(new GiocoDaTavolo("T002", "Pictionary", 1985, 25.99, 4, 60));
        aggiungiGioco(new GiocoDaTavolo("T003", "Taboo", 1989, 24.99, 4, 60));
        aggiungiGioco(new GiocoDaTavolo("T004", "Exploding Kittens", 2015, 19.99, 2, 20));
        aggiungiGioco(new GiocoDaTavolo("T005", "Cluedo", 1949, 29.99, 2, 60));
        aggiungiGioco(new Videogioco("V001", "Sekiro: Shadows Die Twice", 2019, 59.99, "PS4", 30, Genere.AZIONE));
        aggiungiGioco(new Videogioco("V002", "Alan Wake 2", 2023, 59.99, "PS5", 15, Genere.HORROR));
        aggiungiGioco(new Videogioco("V003", "Wuthering Waves", 2024, 59.99, "PC", 600, Genere.AVVENTURA));
        aggiungiGioco(new Videogioco("V004", "Halo: The Master Chief Collection", 2014, 39.99, "Xbox One", 60, Genere.FPS));
        aggiungiGioco(new Videogioco("V005", "Gears of War", 2006, 29.99, "Xbox 360", 10, Genere.TPS));
    }

    public void aggiungiGioco(Gioco gioco) {
        if (giochi.stream().anyMatch(g -> g.getIdGioco().equals(gioco.getIdGioco()))) {
            throw new IllegalArgumentException("Gioco con ID " + gioco.getIdGioco() + " già esistente.");
        }
        giochi.add(gioco);
    }

    public Optional<Gioco> cercaPerID(String id) {
        return giochi.stream().filter(g -> g.getIdGioco().equals(id)).findFirst();
    }

    public void cercaPerPrezzo(double prezzo) {
        List<GiocoDaTavolo> giochiDaTavolo = giochi.stream()
                .filter(g -> g instanceof GiocoDaTavolo && g.getPrezzo() < prezzo)
                .map(g -> (GiocoDaTavolo) g)
                .collect(Collectors.toList());

        List<Videogioco> videogiochi = giochi.stream()
                .filter(g -> g instanceof Videogioco && g.getPrezzo() < prezzo)
                .map(g -> (Videogioco) g)
                .collect(Collectors.toList());

        System.out.println("Giochi da tavolo sotto " + prezzo + "€:");
        if (giochiDaTavolo.isEmpty()) {
            System.out.println("Nessun gioco da tavolo trovato.");
        } else {
            giochiDaTavolo.forEach(gioco ->
                    System.out.printf("ID: %s, Titolo: %s, Prezzo: %.2f€, Giocatori: %d, Durata Media: %d minuti\n",
                            gioco.getIdGioco(), gioco.getTitolo(), gioco.getPrezzo(),
                            gioco.getNumeroGiocatori(), gioco.getDurataMedia())
            );
        }

        System.out.println("\nVideogiochi sotto " + prezzo + "€:");
        if (videogiochi.isEmpty()) {
            System.out.println("Nessun videogioco trovato.");
        } else {
            videogiochi.forEach(gioco ->
                    System.out.printf("ID: %s, Titolo: %s, Prezzo: %.2f€, Piattaforma: %s, Durata: %d ore, Genere: %s\n",
                            gioco.getIdGioco(), gioco.getTitolo(), gioco.getPrezzo(),
                            gioco.getPiattaforma(), gioco.getDurataGioco(), gioco.getGenere())
            );
        }
    }

    public List<Gioco> cercaPerNumeroGiocatori(int numGiocatori) {
        return giochi.stream()
                .filter(g -> g instanceof GiocoDaTavolo && ((GiocoDaTavolo) g).getNumeroGiocatori() == numGiocatori)
                .collect(Collectors.toList());
    }

    public void rimuoviGioco(String id) {
        giochi.removeIf(g -> g.getIdGioco().equals(id));
    }

    public void aggiornaGioco(String id, Gioco nuovoGioco) {
        for (int i = 0; i < giochi.size(); i++) {
            if (giochi.get(i).getIdGioco().equals(id)) {
                giochi.set(i, nuovoGioco);
                return;
            }
        }
        throw new IllegalArgumentException("Gioco con ID " + id + " non trovato.");
    }

    public void statistiche() {
        double sommaPrezziVideogiochi = 0;
        double sommaPrezziGiochiDaTavolo = 0;
        int countVideogiochi = 0;
        int countGiochiDaTavolo = 0;

        GiocoDaTavolo giocoDaTavoloPiùCostoso = null;
        Videogioco videogiocoPiùCostoso = null;

        for (Gioco gioco : giochi) {
            if (gioco instanceof Videogioco) {
                sommaPrezziVideogiochi += gioco.getPrezzo();
                countVideogiochi++;
                if (videogiocoPiùCostoso == null || gioco.getPrezzo() > videogiocoPiùCostoso.getPrezzo()) {
                    videogiocoPiùCostoso = (Videogioco) gioco;
                }
            } else if (gioco instanceof GiocoDaTavolo) {
                sommaPrezziGiochiDaTavolo += gioco.getPrezzo();
                countGiochiDaTavolo++;
                if (giocoDaTavoloPiùCostoso == null || gioco.getPrezzo() > giocoDaTavoloPiùCostoso.getPrezzo()) {
                    giocoDaTavoloPiùCostoso = (GiocoDaTavolo) gioco;
                }
            }
        }

        double mediaVideogiochi = countVideogiochi > 0 ? sommaPrezziVideogiochi / countVideogiochi : 0;
        double mediaGiochiDaTavolo = countGiochiDaTavolo > 0 ? sommaPrezziGiochiDaTavolo / countGiochiDaTavolo : 0;

        System.out.println("Media dei prezzi dei videogiochi: " + mediaVideogiochi);
        System.out.println("Media dei prezzi dei giochi da tavolo: " + mediaGiochiDaTavolo);
        System.out.println("Numero totale di videogiochi: " + countVideogiochi);
        System.out.println("Numero totale di giochi da tavolo: " + countGiochiDaTavolo);

        if (videogiocoPiùCostoso != null) {
            System.out.println("Videogioco più costoso: " + videogiocoPiùCostoso.getTitolo() + " - Prezzo: " + videogiocoPiùCostoso.getPrezzo() + "€");
        }

        if (giocoDaTavoloPiùCostoso != null) {
            System.out.println("Gioco da tavolo più costoso: " + giocoDaTavoloPiùCostoso.getTitolo() + " - Prezzo: " + giocoDaTavoloPiùCostoso.getPrezzo() + "€");
        }
    }

    public List<Gioco> getGiochi() {
        return giochi;
    }

    public void mostraGiochi() {
        if (giochi.isEmpty()) {
            System.out.println("Nessun gioco nella collezione.");
            return;
        }

        System.out.println("Lista dei giochi nella collezione:");

        List<GiocoDaTavolo> giochiDaTavolo = giochi.stream()
                .filter(g -> g instanceof GiocoDaTavolo)
                .map(g -> (GiocoDaTavolo) g)
                .collect(Collectors.toList());

        if (!giochiDaTavolo.isEmpty()) {
            System.out.println("Giochi da tavolo:");
            giochiDaTavolo.forEach(gioco ->
                    System.out.printf("ID: %s, Titolo: %s, Anno: %d, Prezzo: %.2f€, Giocatori: %d, Durata Media: %d minuti\n",
                            gioco.getIdGioco(), gioco.getTitolo(), gioco.getAnnoPubblicazione(), gioco.getPrezzo(),
                            gioco.getNumeroGiocatori(), gioco.getDurataMedia())
            );
        }

        List<Videogioco> videogiochi = giochi.stream()
                .filter(g -> g instanceof Videogioco)
                .map(g -> (Videogioco) g)
                .collect(Collectors.toList());

        if (!videogiochi.isEmpty()) {
            System.out.println("\nVideogiochi:");
            videogiochi.forEach(gioco ->
                    System.out.printf("ID: %s, Titolo: %s, Anno: %d, Prezzo: %.2f€, Piattaforma: %s, Durata: %d ore, Genere: %s\n",
                            gioco.getIdGioco(), gioco.getTitolo(), gioco.getAnnoPubblicazione(), gioco.getPrezzo(),
                            gioco.getPiattaforma(), gioco.getDurataGioco(), gioco.getGenere())
            );
        }
    }
}
